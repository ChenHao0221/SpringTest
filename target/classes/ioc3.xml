<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--  bean之间的依赖（只是改变创建顺序）  -->
    <!--  原来是按照配置的顺序创建bean  -->
    <!--  改变bean的创建顺序  -->
    <!--  depends-on="car,book"就表示创建person之前先创建car和book  -->
    <bean id="person" class="com.chen.bean.Person" depends-on="car,book"></bean>
    <bean id="car" class="com.chen.bean.Car"></bean>
    <bean id="book" class="com.chen.bean.Book"></bean>

    <!--  测试bean的作用域，分别创建单实例和多实例的bean (重要)  -->
    <!--  bean的作用域指bean是否是单实例，默认单实例  -->
    <!--  scope取值：
                prototype:多实例
                    1、容器启动默认不会去创建多实例bean
                    2、获取的时候创建这个bean
                    3、每次获取都会创建一个新的对象

                singleton:单实例（默认）
                    1、在容器启动完成之前就已经创建好对象，保存在容器中了
                    2、任何获取都是获取之前创建好的那个对象
    -->
    <bean id="book01" class="com.chen.bean.Book" scope="prototype"></bean>

    <!--  配置通过静态工厂方法创建的bean、实例工厂方法创建的bean、FactoryBean (重要)  -->
    <!--  bean的创建默认就是框架利用反射new出来的bean实例  -->
    <!--  工厂模式：工厂帮我们创建对象。有一个专门帮我们创建对象的类，这个类就是工厂
          AirPlane ap = AirPlaneFactory.getAirPlane(String jzName);

          静态工厂：工厂本身不用创建对象，通过静态方法调用，对象 = 工厂类.工厂方法名();
          实例工厂：工厂本身需要创建对象
                    工厂类 工厂对象 = new 工厂类();
                    工厂对象.getAirPlane(String jzName);
    -->
    <!--  1、静态工厂(不需要创建工厂本身)  -->
    <!--  factory-method="getAirPlane"：指定哪个方法是工厂方法  -->
    <!--  两步：
          class指定为静态工厂的全类名
          factory-method指定哪个方法是工厂方法

          constructor-arg可以为方法传参
    -->
    <bean id="airPlane01" class="com.chen.factory.AirPlaneStaticFactory" factory-method="getAirPlane">
        <!--   可以为方法指定参数     -->
        <constructor-arg value="小陈"/>
    </bean>

    <!--  2、实例工厂  -->
    <!--  factory-method指定实例工厂中哪个方法是工厂方法
          factory-bean指定当前对象创建用哪个工厂
    -->
    <!--  步骤1：先配置出实例工厂对象
          步骤2：配置我们要创建的对象使用哪个工厂创建
                 1、factory-bean指定使用哪个工厂实例
                 2、factory-method指定使用哪个工厂方法
    -->
    <bean id="airPlaneInstanceFactory" class="com.chen.factory.AirPlaneInstanceFactory"></bean>
    <bean id="airPlane02" class="com.chen.bean.AirPlane" factory-bean="airPlaneInstanceFactory" factory-method="getAirPlane">
        <constructor-arg value="小刘"/>
    </bean>

    <!--  实现FactoryBean的工厂  -->
    <!--  FactoryBean是Spring规定的一个接口，只要是这个接口的实现类，Spring都认为是一个工厂  -->
    <!--  1、ioc容器启动的时候不会创建实例
          2、FactoryBean获取的时候才创建对象
    -->
    <bean id="myFactoryBeanImpl" class="com.chen.factory.MyFactoryBeanImpl"></bean>

    <!--  创建带有生命周期方法的bean  -->
    <!--  生命周期：bean的创建到销毁
          ioc容器中注册的bean：
            1、单实例bean，容器启动的时候就会创建好，容器关闭也会销毁创建的bean
            2、多实例bean，获取的时候才创建
          可以为bean自定义一些生命周期方法，spring在创建或销毁bean的时候就会调用指定的方法
    -->
    <!--  单例bean的生命周期：
          构造器 ===> 初始化方法 ====> (容器关闭)销毁方法
          多实例bean的生命周期：
          获取bean(构造器 ===> 初始化方法) ===> 容器关闭不会调用bean的销毁方法
    -->
    <bean id="book02" class="com.chen.bean.Book" init-method="myInit" destroy-method="myDestroy"></bean>

    <!--  测试bean的后置处理器BeanPostProcessor  -->
    <!--  Spring有一个接口：后置处理器，可以在bean的初始化前后调用方法  -->
    <!--  在配置文件中注册后置处理器  -->
    <!--  后置处理器：
          (容器启动)构造器 ===> 后置处理器before ===> 初始化方法 ===> 后置处理器after ===>  bean初始化完成

          无论bean是否有初始化方法，后置处理器都会默认器有，还会继续工作
    -->
    <bean id="beanPostProcessor" class="com.chen.bean.MyBeanPostProcessor"></bean>

</beans>