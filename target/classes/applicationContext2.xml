<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.2.xsd
       ">

    <!--  通过注解分别创建Dao、Service、Controller(控制器，控制网站跳转逻辑-Servlet)(重要)  -->
    <!--  通过给bean上添加某些注解，可以快速地将bean加入到ioc容器中  -->
    <!--  某个类上添加上任何一个注解都能快速将这个组件加入到ioc容器地管理中
          Spring有四个注解：
                @Controller：控制器，推荐给控制器层(Servlet包下)的组件加这个注解
                @Service：业务逻辑，推荐给业务逻辑层(Service包下)的组件加这个注解
                @Repository：给数据库层(持久化层，Dao层)的组件添加这个注解
                @Component：给不属于以上几层的组件(例如WebUtils)添加这个注解

          注解可以随便加，Spring底层不会去验证这个组件是否如注解所说是某个层的组件
          推荐各自层加各自的注解(注解是给程序员看的)

          加了注解地组件，id默认就是类名首字母小写！！！

          使用注解将组件快速加入到容器中的步骤：
          1、给要添加的组件上标四个注解的任何一个
          2、告诉Spring自动扫描加了注解的组件，依赖context名称空间
          3、一定要导入aop包，支持加注解模式

          使用注解加入到容器地组件和使用配置加入到容器地组件行为默认都是一样地
          1、组件地id默认就是组件类名地首字母小写
                修改id：@Repository("bookdao02")
          2、组件地作用域默认就是单例的
                改变单/多实例：再加一个注解@Scope(value="prototype")就表示多实例
    -->
    <!--  context:component-scan：自动扫描组件
          base-package：指定扫描的基础包，把基础包以及它下面的所有包的所有加了注解的类，自动地扫描到ioc容器中
    -->
    <context:component-scan base-package="com.chen"></context:component-scan>

    <!--  使用context:exclude-filter标签指定扫描包时不包含的类
          【type="annotation"】：指定排除规则，表示按照注解进行排除，标注了指定注解的组件不要
                expression=""：注解的全类名
          【type="assignable" 】：指定排除某个具体的类，按照类排除
                expression=""：写要排除的类的全类名

          type="aspectj"
          type="custom"：自定义一个TypeFilter，自己写代码决定哪些使用
          type="regex"：还可以写正则表达式
    -->
    <!--  使用context:include-filter标签指定扫描包时要包含的类
          只扫描进哪些组件(默认是全部扫描进来)，一定要禁用默认规则才有用
          type和expression用法和上述一样
          禁用掉默认都扫描这一规则：在扫描时加上use-default-filter="false"
    -->

    <!--  依赖注入  -->
    <!--  使用@Autowired注解实现根据类型实现自动装配 (重要)  -->
    <!--  @Autowired：Spring会自动为这个属性赋值，一定是去容器中找到这个属性对应的组件 (所以前提是组件已经加到容器中)  -->
    <!--   @Autowired原理：
           @Autowired
           private BookService bookService;
           1、先按照类型去容器中找到对应的组件。bookService = ioc.getBean(BookService.class);
                1）、找到一个，就赋值
                2）、没找到就抛异常
                3）、如果找到多个
                    【1】、按照变量名bookService作为id继续匹配 (BookService这个bean的默认id就是bookService)
                        1、匹配上，装配
                        2、没有匹配，报错
                           可以使用@Qualifier指定一个新的id
    -->
    <!--  如果资源类型的bean不止一个，默认根据@Autowired注解标记的成员变量名作为id查找bean，进行装配
          如果根基成员变量名作为id还是找不到bean，可以使用@Qualifier注解明确指定目标bean的id
    -->
    <!--  发现：Autowired标注的自动装配的属性默认一定要装配上，装配不上就报错
          我们要让他找到就装配，找不到就拉倒：使用@Autowired注解的required属性指定某个属性允许不被设置  @Autowired(required=false)
    -->
    <!--
          方法上有@Autowired的话
              1、这个方法也会在bean创建的时候自动运行
              2、这个方法上的每一个参数都会自动注入值(装配流程和上面的一样)
          在方法形参位置使用@Qualifier注解，指定装配时目标bean的id
    -->
    <!--  @Autowired、@Resource、@Inject都是自动装配的意思
          @Autowired最强大，Spring自己的注解
          @Resource是j2ee，java的标准，因此扩展性更强，如果切换成另一个容器框架，@Resource还是可以使用的(@Autowired离开Spring就没用了)
          @Inject是在特定环境下(EJB)
    -->

    <!--  Spring的单元测试 (代码详见SpringUnitTest.java)  -->
    <!--  使用Spring的单元测试
          1、导包，Spring单元测试包
          2、@ContextConfiguration(location="")使用它来指定Spring的配置文件
          3、@RunWith()指定用哪种驱动进行单元测试，默认是junit
             @RunWith(SpringJUnit4ClassRunner.class)使用Spring的单元测试模块来执行标了@Test注解的测试方法 (以前@Test注解是由junit执行的)
          好处：不用ioc.getBean()获取组件了，直接@Autowired，Spring自动装配
    -->
</beans>